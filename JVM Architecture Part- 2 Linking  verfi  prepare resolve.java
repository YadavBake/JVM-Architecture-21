
									JVM Architecture Part- 2|| Linking ||verfi|| prepare||resolve
								===================================================================	
								

 ----------------
   2. Linking  	
 ----------------
  
   -> Linking consist of 3 activites :
	

		1. Verify 
		2. Prepare
		3. Resolve 
		
	---------	
	 Verify 
	---------

		-> It is the process of ensuaring that binary reprastation of a class is structurly currect or not that is JVM
		   will check whether the .class file is generated by valid compiler or not. That is whether .class file is 
		   properly formated or not.	
		   
		-> Internally bite code verifier is responsible for this activity.
		
		-> Bite code verifier is the part of class Loader SubSystem.
		
		-> If verification fails then we will get runtime exception saying java.lang.VerifyError.
	
	-------------
	 Preparation 
	-------------

		-> In this fhesh JVM will allocate Memory for class level static variables and assign default values.
		
	Note:

		-> In Initialization fhesh original value will assign to the static variables and here only default values 
		   will be assign.
	
	-----------	
	 Resolve 
	-----------

		-> It is the process of replacing symbolic names in our program is original memory references from method area.
		
			class Test
			{
				public static void main(String args[])
				{
					String s = new String ("Durga");
					Student s1 = new Student();
				}
			}
			
		-> For the above class ClassLoader loads Test.class,String.class,Student.class and Object.class.

		-> The names of this classes are stored in constant pool of Test class.
		
		-> In resolution fhesh this names are replace with original Memory level reference from Method area.
		
----------------------
  3. Initialization		
----------------------
 
   -> In this all static variables are assinged with original values and static blocks will be executed from parent to 
	  child and from top to bottum.
	
										class Loader Subsystem
					-----------------------------------------------------------------------	
					|																	  |
					|						----------------                              |
					|						|              |	                          |
					|						|              |                              |
					|						| ----------   |                              |
					|						| | Verify |   |                              |
					|	----------		    | ----------   		    -----------------	  |
					|	|Loading |======>   |              |======> |Initialization |	  |
					|	----------		    | ----------   |        -----------------     |
					|						| |Prepare |   |                              |
					|						| ----------   |                              |
					|						|              |                              |
					|						| ----------   |                              |
					|						| |Resolve |   |                              |
					|						| ----------   |                              |
					|						|              |                              |
					|						----------------                              |
					|							Linking 	                              |
                    |                                                                     |
                    |                                                                     |
                    |                                                                     |
                    -----------------------------------------------------------------------
                    
								Fig: Class Loading System Process.
                    
                    
    ->  While loading, Linking and initialization if any error accures then we will get runtime exception saying
		java.lang.LinkageError.
		
		
=========================
 Types of class Loaders 
=========================

	-> class Loader Subsystem containes the following 3 types of class loaders.


			1. Bootstrap class Loader | Primordial class Loader.
			2. Extension class Loader 
			3. Application class Loader | System class Loader.
			
			

	  ----------------------------------------------------	
		Bootstrap class Loader | Primordial class Loader.
	  ----------------------------------------------------

		 -> Bootstrap class loader is responsible to load core java API classes that is the classes prasent in rt.jar. 
		 
			JDK 
			 |
			 |->JRE 
				 |->lib 
					 |->rt.jar 
		 
		 -> This location is called Bootstrap class path that is Bootstrap class loader is responsible to load classes 
			from Bootstrap class path.
			
		 -> Bootstrap class loader is by default available with every JVM.
		 
		 -> It is implemented in native languages like C or C++ and not implemented in java.
		 
	  ---------------------------	
		Extension class Loader 	
	  ---------------------------

		 -> Extension class loader is the child class of Bootstrap class loader.
		 
		 -> 		Bootstrap class Loader
				
							^
							|
							|
							|
							|
					Extension class Loader 		
							
		 -> Extension class Loadre is responsible to load classes from extension class path (JDK\JRE\lib\ext.			


			JDK 
             |
             |->JRE 
            	 |->lib 
            		 |->ext(extension)
							|
							|-> *.jar 


		 -> Extension class loader is implemented in java and the corrusponding .class file is.
		 
				sun.misc.Launcher$ExtClassLoader.class 
				
		
	  --------------------------------------------------	
		Application class Loader | System class Loader.
	  --------------------------------------------------

		 -> Application class loader is the child class Extension class loader.
		 
		 -> This class loader is responsible to load classes from Application class Path.
		 
		 -> It internally uses Environment variable class path.		
		 
		 -> Application class loader is implemented in java and the corrusponding .class file name is.
		 
		 
				sun.misc.Launcher$APPClassLoader.class
				
				
		 
		 
				Bootstrap class Loader
                
                		^
                		|
                		|
                		|
                		|
                Extension class Loader 	
						^
						|
						|
						|
				Application class Loader		|
















 